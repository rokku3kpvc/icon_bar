# TODO: –ø–∏—Å—Ç–∞—å –æ—Ç—á–µ—Ç—ã –≤ –ë–î –∏ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏—Ö –æ—Ç—Ç—É–¥–∞
# TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º—É—é –ø—Ä–æ–¥–∞–≤–∞–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é
# TODO: –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
class OrderReport
  attr_reader :items

  def initialize
    @from = Utils::Calendar.saturday
    @till = (@from + 1.day).end_of_day
    @items = OrderQuery.new(from: @from, till: @till).execute
  end

  def generate
    total_count = items.size
    total_price = items.sum(:total_price)
    average_price = items.average(:total_price).to_i
    max_price = items.maximum(:total_price)

    text_report = "üìÜ –û—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö\n\n"
    text_report += "‚è∞ –ü–µ—Ä–∏–æ–¥: __#{format_time(@from)} - #{format_time(@till)}__\n\n"
    text_report += "üí™üèª –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ: #{total_count}\n"
    text_report += "üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: #{total_price}‚ÇΩ\n"
    text_report += "üíµ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: #{average_price}‚ÇΩ\n"
    text_report += "ü§ë –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: #{max_price}‚ÇΩ\n\n"
    text_report += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:\n#{products_sales_chart}\n"
    text_report += "üë®üèº‚Äçüíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n#{users_sales_chart}\n"

    text_report
  end

  private

  def format_time(time)
    time.strftime('%d-%m-%Y %H:%M:%S')
  end

  def products_sales_chart
    item_ids = []
    items.each { |i| item_ids << i.id }

    return '' if item_ids.empty?

    query =  'SELECT products.name, categories.name, COUNT(*) AS count_all FROM products '
    query += 'INNER JOIN order_items ON products.id = order_items.product_id '
    query += 'LEFT OUTER JOIN categories ON categories.id = products.category_id '
    query += 'LEFT OUTER JOIN orders ON orders.id = order_items.order_id '
    query += "WHERE order_items.order_id IN (#{item_ids.join(',')}) "
    query += 'GROUP BY products.name, categories.name ORDER BY count_all DESC;'

    ActiveRecord::Base.connection.execute(query)
                      .values
                      .map { |v| "#{v.first} (__#{v.second}__) - **#{v.third} —à—Ç.**\n" }
                      .join
  end

  def users_sales_chart
    query =  'SELECT COUNT(*) AS count_all, users.first_name FROM orders '
    query += 'LEFT OUTER JOIN users ON users.id = orders.user_id '
    query += "WHERE orders.state = 'confirmed' AND orders.updated_at BETWEEN '#{format_time(@from)}' AND '#{format_time(@till)}' "
    query += 'GROUP BY users.first_name ORDER BY count_all DESC;'

    ActiveRecord::Base.connection.execute(query)
                      .values
                      .map { |v| "[#{v.second}](tg://user?id=#{v.first}) - #{v.first}\n" }
                      .join
  end
end
